from datetime import datetime

from pytz import timezone
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from config import *
from math import ceil
from timezonefinder import TimezoneFinder


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

tf = TimezoneFinder()


async def get_city_timezone(lat, lon):
    tz_name = tf.timezone_at(lat=lat, lng=lon)
    if tz_name:
        return timezone(tz_name)

    return None


@dp.message_handler(commands=['start'])
async def start_command(msg: types.Message):
    await msg.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã')


@dp.message_handler()
async def get_weather(msg: types.Message):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f'http://api.openweathermap.org/data/2.5/weather',
                params={'q': msg.text, 'appid': API_KEY, 'units': 'metric'}
            )
            response.raise_for_status()

            data = response.json()
            weather = data['weather'][0]
            main = data['main']
            wind = data['wind']
            sys = data['sys']
            coord = data['coord']

            city = data['name']
            cur_weather = main['temp']
            humidity = main['humidity']
            pressure = main['pressure']
            wind_speed = wind['speed']

            sunrise_timestamp = sys['sunrise']
            sunset_timestamp = sys['sunset']

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –≥–æ—Ä–æ–¥–∞
            city_timezone = await get_city_timezone(coord['lat'], coord['lon'])

            if city_timezone:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞
                sunrise_time = datetime.fromtimestamp(sunrise_timestamp, timezone('UTC')).astimezone(city_timezone).strftime('%H:%M')
                sunset_time = datetime.fromtimestamp(sunset_timestamp, timezone('UTC')).astimezone(city_timezone).strftime('%H:%M')

                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è –≤ —á–∞—Å–∞—Ö –∏ –º–∏–Ω—É—Ç–∞—Ö
                length_day_seconds = sunset_timestamp - sunrise_timestamp
                length_day_hours = length_day_seconds // 3600
                length_day_minutes = (length_day_seconds % 3600) // 60

                code_to_smile = {
                    "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
                    "Clouds": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
                    "Rain": "–î–æ–∂–¥—å üåßÔ∏è",
                    "Drizzle": "–î–æ–∂–¥—å üåßÔ∏è",
                    "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚õàÔ∏è",
                    "Snow": "–°–Ω–µ–≥ üå®Ô∏è",
                    "Mist": "–¢—É–º–∞–Ω üå´Ô∏è"
                }
                weather_description = code_to_smile.get(weather['main'],
                                                        '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞...')

                await msg.reply(
                    f"{datetime.now(city_timezone).strftime('%A %d-%m-%Y %H:%M')}\n"
                    f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather} ¬∞C - {weather_description}\n"
                    f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {ceil(pressure / 1.333)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å \n"
                    f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_time}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_time}\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_day_hours} —á–∞—Å–æ–≤ {length_day_minutes} –º–∏–Ω—É—Ç\n"
                    f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üëã",
                    parse_mode=ParseMode.HTML
                )
            else:
                await msg.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.')
    except httpx.HTTPError as http_err:
        print(f"HTTP error occurred: {http_err}")
        await msg.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ HTTP-–∑–∞–ø—Ä–æ—Å–∞')
    except Exception as e:
        print(f"An error occurred: {e}")
        await msg.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


if __name__ == '__main__':
    executor.start_polling(dp)
