import datetime
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from config import *
from math import ceil


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_command(msg: types.Message):
    await msg.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã')


@dp.message_handler()
async def get_weather(msg: types.Message):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f'http://api.openweathermap.org/data/2.5/weather',
                params={'q': msg.text, 'appid': API_KEY, 'units': 'metric'}
            )
            response.raise_for_status()

            data = response.json()
            weather = data['weather'][0]
            main = data['main']
            wind = data['wind']
            sys = data['sys']

            city = data['name']
            cur_weather = main['temp']
            humidity = main['humidity']
            pressure = main['pressure']
            wind_speed = wind['speed']

            sunrise_timestamp = datetime.datetime.fromtimestamp(sys['sunrise'])
            sunset_timestamp = datetime.datetime.fromtimestamp(sys['sunset'])
            length_day = sunset_timestamp - sunrise_timestamp

            code_to_smile = {
                "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
                "Clouds": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
                "Rain": "–î–æ–∂–¥—å üåßÔ∏è",
                "Drizzle": "–î–æ–∂–¥—å üåßÔ∏è",
                "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚õàÔ∏è",
                "Snow": "–°–Ω–µ–≥ üå®Ô∏è",
                "Mist": "–¢—É–º–∞–Ω üå´Ô∏è"
            }
            weather_description = code_to_smile.get(weather['main'], '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞...')

            await msg.reply(
                f"{datetime.datetime.now().strftime('%A %d-%b-%Y %H:%M')}\n"
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather} ¬∞C - {weather_description}\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {ceil(pressure / 1.333)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å \n"
                f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp.strftime('%H:%M')}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp.strftime('%H:%M')}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_day}\n"
                f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
                parse_mode=ParseMode.HTML
            )
    except httpx.HTTPError as http_err:
        print(f"HTTP –æ—à–∏–±–∫–∞: {http_err}")
        await msg.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ HTTP-–∑–∞–ø—Ä–æ—Å–∞')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await msg.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


if __name__ == '__main__':
    executor.start_polling(dp)
