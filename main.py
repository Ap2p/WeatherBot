import os
import datetime
import httpx
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.utils import executor
from config import *
import math

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_command(msg: types.Message):
    await msg.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã')


@dp.message_handler()
async def get_weather(msg: types.Message):
    try:
        response = httpx.get(
            f'http://api.openweathermap.org/data/2.5/weather?q={msg.text}&appid={API_KEY}&units=metric')  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ API_KEY
        data = response.json()
        city = data['name']
        cur_weather = data['main']['temp']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        wind = data['wind']['speed']

        sunrise_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunset'])

        length_day = sunset_timestamp - sunrise_timestamp

        code_to_smile = {
            "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
            "Clouds": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
            "Rain": "–î–æ–∂–¥—å üåßÔ∏è",
            "Drizzle": "–î–æ–∂–¥—å üåßÔ∏è",
            "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚õàÔ∏è",
            "Snow": "–°–Ω–µ–≥ üå®Ô∏è",
            "Mist": "–¢—É–º–∞–Ω üå´Ô∏è"
        }

        weather_description = data['weather'][0]['main']

        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞...'

        await msg.reply(f"{datetime.datetime.now().strftime('%A %d-%b-%Y %H:%M')}\n"
                        f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather} ¬∞C - {wd}\n"
                        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure / 1.333)} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å \n"
                        f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp.strftime('%H:%M')}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp.strftime('%H:%M')}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_day}\n"
                        f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", parse_mode=ParseMode.HTML)
    except Exception as e:  # –£—Ç–æ—á–Ω–∏–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"An error occurred: {e}")
        await msg.reply('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')


if __name__ == '__main__':
    executor.start_polling(dp)
